#!/bin/bash -e
#
#  Update Amulet test definitions
#
#  This script is likely only relevant for the tasks necessary at a
#  point in time.  Commited to repo for reference anyway, to be
#  improved upon for later needs.

charms="$(cat charms.txt)"
src_charms="$(cat source-charms.txt)"
basedir="$(pwd)"
branch="$1"

gerrit_topic="update-amulet-defs"
commit_msg_file="$basedir/commit-message-amulet-defs-1609.txt"

all_params="$@"
if [[ "$all_params" == *--amend* ]]; then
  AMEND="True"
fi
if [[ "$all_params" == *--noreview* ]]; then
  NO_REVIEW="True"
fi

usage="usage: update-amulet-defs <master||stable/nn.nn>

USAGE EXAMPLES

Clone repos, check out the master branch, make changes and
submit gerrit reviews:
  ./update-amulet-defs master

Clone repos, check out the master branch, make changes
but do not actually submit a gerrit review:
  ./update-amulet-defs master --noreview

Re-use local checkout, amend commits and add patchset to
the existing gerrit review:
  ./update-amulet-defs master --amend

Re-use local checkout, amend commits for adding to the review,
but do not actually submit a gerrit review:
  ./update-amulet-defs master --amend --noreview
"

if [ -z "$branch" ]; then
    echo -e "$usage"
    exit 1
fi

# Expect user to have git config ready for gerrit use
git config --get gitreview.username || ( echo " ! Not set: gitreview.username git config option"; echo -e "$usage"; exit 1 )

commit_msg="$(cat $commit_msg_file ||:)"
if [ -z "$commit_msg" ]; then
    echo " ! $commit_msg_file not found or empty."
    exit 1
fi


function git_get(){
  (
  if [[ "${AMEND^^}" != "TRUE" ]] && [[ ! -d $2 ]]; then
    echo " + Clone $1 -> $2"
    git clone $1 $2
    cd $2
    git checkout $3
  elif [[ "${AMEND^^}" != "TRUE" ]] && [[ -d $2 ]]; then
    echo " ! Dir exists: $2.  Consider running 'make clean' or using --amend."
    exit 1
  else
    echo " . Re-using checkout dir $2"
    cd $2
    git branch -v
  fi
  )
}


function git_review(){
  if [ "${NO_REVIEW^^}" == "TRUE" ]; then
    echo " . Not proposing gerrit (dry run)."
  else
    echo " . Submitting gerrit review for $charm"
    git review
  fi
}


for charm in $charms; do
  echo "===== $charm ====="
  (
    git_get https://github.com/openstack/charm-$charm $charm $branch
    cd $charm

    # Set file locations depending on charm type
    if [[ $src_charms == *"$charm"* ]]; then
      # src charms
      x_n_dev_file="$basedir/$charm/src/tests/dev-basic-xenial-newton"
      x_n_dest_file="$basedir/$charm/src/tests/gate-basic-xenial-newton"
      t_m_src_file="$basedir/$charm/src/tests/gate-basic-trusty-mitaka"
      p_i_del_file="$basedir/$charm/src/tests/gate-basic-precise-icehouse"
    else
      # classic charms
      x_n_dev_file="$basedir/$charm/tests/dev-basic-xenial-newton"
      x_n_dest_file="$basedir/$charm/tests/gate-basic-xenial-newton"
      t_m_src_file="$basedir/$charm/tests/gate-basic-trusty-mitaka"
      p_i_del_file="$basedir/$charm/tests/*precise*"
    fi

    # Move Xenial Newton Dev test definitions to gate test definitions
    if [[ -f $x_n_dev_file ]]; then
      git mv -fv $x_n_dev_file $x_n_dest_file
      echo " . Moved OK: $x_n_dest_file"
    elif [[ ! -f $x_n_dev_file ]] && [[ -f $x_n_dest_file ]]; then
      echo " . Already OK: $x_n_dest_file"
    elif [[ ! -f $x_n_dev_file ]] && [[ ! -f $x_n_dest_file ]] && [[ -f $t_m_src_file ]]; then
      cp $t_m_src_file $x_n_dest_file
      sed -e "s_mitaka_newton_g" -i $x_n_dest_file
      sed -e "s_Mitaka_Newton_g" -i $x_n_dest_file
      sed -e "s_trusty_xenial_g" -i $x_n_dest_file
      sed -e "s_Trusty_Xenial_g" -i $x_n_dest_file
      echo " + Generated $x_n_dest_file based on $t_m_src_file"
    elif [[ ! -f $x_n_dev_file ]] && [[ ! -f $x_n_dest_file ]] && [[ ! -f $t_m_src_file ]]; then
      echo " !!! Manual edits required"
    fi

    # Remove Precise test definitions
    if [[ -n "$(ls $p_i_del_file)" ]]; then
      git rm -f $p_i_del_file
      echo " . Removed OK: $p_i_del_file"
    fi

    git_status="$(git status -s)"
    if [[ "${AMEND^^}" != "TRUE" ]] && [[ -n "$git_status" ]]; then
      git checkout -b $gerrit_topic
      git add .
      git commit -F $commit_msg_file
      git_review
    elif [[ "${AMEND^^}" == "TRUE" ]] && [[ -n "$git_status" ]]; then
      git checkout $gerrit_topic
      git add .
      git commit --amend --no-edit
      git_review
    else
      echo " - No changes for $charm, skipping git review."
    fi
  )
done
