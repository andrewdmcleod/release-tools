#!/bin/bash -e
# Build a charm from a local checkout/clone directory, trying various
# approaches in play by different charms, also allowing manual and
# automated calls.
#
# Some layer components may be blocked by egress firewalls. It may
# be necessary to use an http_proxy (set env var beforehand if so).

charm_dir="$1"
charm_name="$2"
usage="usage: build-charm <charm checkout dir> <charm name>
  ex:
    ./build-charm /path/to/git/clone/of/charm-tempest tempest

  If <charm name> is not provided, attempt to detect and set
  it from the charm checkout dir.
"

if [[ ! -d "$charm_dir" ]]; then
  echo "$usage"
  echo " ! charm_dir ($charm_dir) not found"
  exit 1
fi


# Attempt to learn the charm name from the charm dir if not specified.
# Where charm dir is:  /path/to/charm-foo  [or]  /path/to/foo  [or just]  foo
if [[ -z "$charm_name" ]]; then
  charm_name="$(echo "$charm_dir" | sed -n -e 's/^.*charm-//p')"
  [[ -z "$charm_name" ]] && charm_name="${charm_dir##*/}"
  [[ -z "$charm_name" ]] && charm_name="$charm_dir"
  echo " + Autodetected charm name as: $charm_name"
fi


# Very basic pre-flight checks
if [[ ! -f "$charm_dir/layer.yaml" ]] &&\
   [[ ! -f "$charm_dir/src/layer.yaml" ]]; then
  echo " ! $charm_name has no layer.yaml"
  exit 1
fi
if [[ ! -f "$charm_dir/config.yaml" ]] &&\
   [[ ! -f "$charm_dir/src/config.yaml" ]]; then
  echo " ! $charm_name has no config.yaml"
  exit 1
fi


# Build!
# Prefer building via tox. Attempt to fall back to charm build.
DIR="$(pwd)"
if grep "^\[testenv:build\]$" $charm_dir/tox.ini &> /dev/null; then
  echo " . Building $charm_dir ($charm_name) via tox"
  cd $charm_dir
  tox -e build
  cd $DIR
elif grep "^\[testenv:generate\]$" $charm_dir/tox.ini &> /dev/null; then
  echo " . Building $charm_dir ($charm_name) via tox [DEPRECATION NOTICE: generate tox enviro needs to be renamed to build]"
  cd $charm_dir
  tox -e generate
  cd $DIR
else
  echo " . Falling back to building $charm_dir ($charm_name) without tox. This may fail. The charm should support 'tox -e build'!"
  cd $charm_dir
  charm build -o build
  cd $DIR
fi


# OSCI automation relies on this env var being set after build.
export BUILT_ASSET_DIR="$(readlink -f $charm_dir/build/trusty/$charm_name)"


# A very basic validation of the built artifact.
if [[ ! -f "$BUILT_ASSET_DIR/config.yaml" ]] || \
   [[ ! -f "$BUILT_ASSET_DIR/.build.manifest" ]] || \
   [[ ! -f "$BUILT_ASSET_DIR/copyright" ]] || \
   [[ ! -f "$BUILT_ASSET_DIR/README.md" ]] || \
   [[ ! -f "$BUILT_ASSET_DIR/metadata.yaml" ]]; then
  echo " ! Unable to confirm the built artifact in: $BUILT_ASSET_DIR"
  exit 1
fi

echo " . Built asset dir: $BUILT_ASSET_DIR"
